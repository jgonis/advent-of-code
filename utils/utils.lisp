(in-package :aoc-utils)
(defun make-growable-vector (initial-size) 
    (make-array initial-size :fill-pointer 0 :adjustable t))

(defun string->list (str)
  (map 'list (lambda (x) x) str))

(defun input->list (input-path)
  (let ((input '()))
    (with-open-file (in-stream input-path)
      (do ((line (read-line in-stream) (read-line in-stream nil nil)))
          ((null line) input)
        (push line input)))
    (reverse input)))

(defun trim-spaces (in-string)
  (string-trim '(#\Space) in-string))

(defgeneric is-prime? (num))
(defmethod is-prime? ((num integer))
  (cond ((= num 2) t)
        ((= num 3) t)
        (t (let ((end (ceiling (sqrt num))))
             (do ((current 2 (1+ current)))
                 ((> current end) t)
               (if (= 0 (mod num current))
                   (return nil)))))))

(defun generate-prime-list (number-of-primes)
  (let ((prime-list (list)))
    (do ((current 2 (1+ current)))
        ((= (length prime-list) number-of-primes) (reverse prime-list))
      (if (is-prime? current) 
          (setf prime-list (cons current prime-list))))))
(defgeneric generate-next-prime (starting-from))
(defmethod generate-next-prime ((starting-from integer))
  (do ((current (+ starting-from 1) (1+ current)))
      ((is-prime? current) current)))
