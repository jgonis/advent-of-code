(in-package :advent-of-code-2019)
(defclass op-code () ())
(defclass add-op (op-code) ())
(defclass multiply-op (op-code) ())
(defgeneric increment-pc (op-code program-counter]))
(defmethod increment-pc ((op-code add-op) program-counter)
  (+ program-counter 4))
(defmethod increment-pc ((op-code multiply-op) program-counter)
  (+ program-counter 4))
(defgeneric handle-op (op-code memory program-counter))
(defmethod handle-op ((op-code add-op) memory program-counter)
  (let* ((operand-1 (elt memory (elt memory (+ program-counter 1))))
         (operand-2 (elt memory (elt memory (+ program-counter 2))))
         (result-location (elt memory (+ program-counter 3)))
         (result (+ operand-1 operand-2)))
    (setf (elt memory result-location) result)))
(defmethod handle-op ((op-code multiply-op) memory program-counter)
  (let* ((operand-1 (elt memory (elt memory (+ program-counter 1))))
         (operand-2 (elt memory (elt memory (+ program-counter 2))))
         (result-location (elt memory (+ program-counter 3)))
         (result (* operand-1 operand-2)))
    (setf (elt memory result-location) result)))

